#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Created by jimbray on 2017/1/24
import collections
import json
import urllib
import json

__author__ = 'jimbray'

# from Crypto.Cipher import AES
import hashlib
import requests

def getMd5Value(param):
    sss = str(param).encode('utf-8')
    return hashlib.md5(sss).hexdigest()


if __name__ == '__main__':

    # dt = collections.OrderedDict()
    # dt['origChanId'] = 'xiaomi'
    # dt['appId'] = 'A0008'
    # dt['ts'] = '1459936625905'
    # dt['netModel'] = 'w'
    # dt['chanId'] = 'guanwang'
    # dt['imei'] = '357541051318147'
    # dt['qid'] = ''
    # dt['mac'] = 'e8:92:a4:9b:16:42'
    # dt['capSsid'] = 'hijack'
    # dt['lang'] = 'cn'
    # dt['longi'] = '103.985752'
    # dt['nbaps'] = ''
    # dt['capBssid'] = 'b0:d5:9d:45:b9:85'
    # dt['bssid'] = 'b0:d5:9d:56:82:10'
    # dt['mapSP'] = 't'
    # dt['userToken'] = ''
    # dt['verName'] = '4.1.8'
    # dt['ssid'] = '360免费WiFi-10'
    # dt['verCode'] = '3028'
    # dt['uhid'] = 'a0000000000000000000000000000001'
    # dt['lati'] = '30.579577'
    # dt['dhid'] = '9374df1b6a3c4072a0271d52cbb2c7b6'
    # dt = json.dumps(dt, ensure_ascii=False, separators=(',', ':'))
    # dt = urllib.quote(dt)
    # j = len(dt)
    # i = 0
    # while i < 16 - j % 16:
    #     dt += ' '
    #     i += 1
    # cipher = AES.new(b"!I50#LSSciCx&q6E", AES.MODE_CBC, b"$t%s%12#2b474pXF")
    # ed = cipher.encrypt(dt).encode('hex').upper()
    # 27C6B45D6184F0FF3C8375CE448755C7B2E09E2EB66BBEAEC8029C0C5BB32244E45E6392081FC728E933EE062B9ECA1B8695A40195C0333BFAC531BB9680AC227BA58ED7FEC136DA8155F069A0BA2852BC1091223EBB189E36461C8240F24770072315438505DDF94146F62CC1159F13B6ED3CC48A76CBE0969E7B61979CE85F62C93C1542F1545CE74BFAE1ECDD59C0AB2CC9A180300F2878689E8C358F5026001C3F0F2E6228C9E36F64928DFF1FC707DE95C2D3C6DAF28EFE0C4A07451256D5CD0AE86EBE7F2E2403E59CA583A589018D0852D966ED4EDEF700D7DEFD22B437B467DCDADACAD3B1794C4709C970CA3E08B3F82982C6EBCB32CED3A8EB8280524E0E92AD9CEF7FBA7BED3B0A3C9F01020FBEF60A20E2B182D9B88A95FA571E30DD7FAF909CFD2719C6E38968EC7149867FD212416C03218707CFA1A60CC22C95F9527E0F3D6D6648F57A7E7EE3895A91BD240CCF3CA275C42AA3CD5B9C9460213DAECAA6959D37C79A6784C90BFB2B31CAA20BA897D752C4872F4B8437E5B61472681C18A4B67647504A452F43500FF4FCE7FF63F55EFDDB4D6490121E906AF43B8C9C9A3430DE944B913D4B26B8191726E48413E1653F775F3FBAD7BE29CCB8FD86A247FCC9DB35EF5BB7E59F04481C89C813B9755F928BDFF8165C9EB54FA26D29B6CAF19432B02FDB0E44139F8FFAD6B09B408078F55891CDCC283228DBA1022B43E24057B8035792F1264FB01E3BDD9640D4CE86CA9B45DFBC4BD8923766B8C8D5B3B703AF69C9A60C31D929E4D065CE866DD75BC15689892D343D5A5AA6F6CBF4CFFDA92161FE260E25DE965E9D3DBC2622F00B7579675859795AFBB26123ADD58042198FC3DCCA97A61FAC1A4B8B23925A6802D4C160AA927519BB8CCBB6290EE4C3CF12E67C0DAEA2DF0155EC6E3843D146041A0DC94CF72155A8C5AA4662CEADD6906A516BE9597D92CF03961C45A2929EB36426C233009A7748AEF3F33621BCE071BEF8F751191A4D2C749081ACA2DC1C2B760BDBEC057D1FD76D4A533FDE09D7AED822C057CD09E06B527EF6D2FD5D5114D6AAA70B008BAC393DC0EF19C51D21480AD65CE3A3A0156E82
    ed = '27C6B45D6184F0FF3C8375CE448755C7B2E09E2EB66BBEAEC8029C0C5BB32244E45E6392081FC728E933EE062B9ECA1B8695A40195C' \
         '0333BFAC531BB9680AC227BA58ED7FEC136DA8155F069A0BA2852BC1091223EBB189E36461C8240F24770072315438505DDF94146F6' \
         '2CC1159F13B6ED3CC48A76CBE0969E7B61979CE85F62C93C1542F1545CE74BFAE1ECDD59C0AB2CC9A180300F2878689E8C358F50260' \
         '01C3F0F2E6228C9E36F64928DFF1FC707DE95C2D3C6DAF28EFE0C4A07451256D5CD0AE86EBE7F2E2403E59CA583A589018D0852D966' \
         'ED4EDEF700D7DEFD22B437B467DCDADACAD3B1794C4709C970CA3E08B3F82982C6EBCB32CED3A8EB8280524E0E92AD9CEF7FBA7BED3' \
         'B0A3C9F01020FBEF60A20E2B182D9B88A95FA571E30DD7FAF909CFD2719C6E38968EC7149867FD212416C03218707CFA1A60CC22C95' \
         'F9527E0F3D6D6648F57A7E7EE3895A91BD240CCF3CA275C42AA3CD5B9C9460213DAECAA6959D37C79A6784C90BFB2B31CAA20BA897D' \
         '752C4872F4B8437E5B61472681C18A4B67647504A452F43500FF4FCE7FF63F55EFDDB4D6490121E906AF43B8C9C9A3430DE944B913D' \
         '4B26B8191726E48413E1653F775F3FBAD7BE29CCB8FD86A247FCC9DB35EF5BB7E59F04481C89C813B9755F928BDFF8165C9EB54FA26' \
         'D29B6CAF19432B02FDB0E44139F8FFAD6B09B408078F55891CDCC283228DBA1022B43E24057B8035792F1264FB01E3BDD9640D4CE86' \
         'CA9B45DFBC4BD8923766B8C8D5B3B703AF69C9A60C31D929E4D065CE866DD75BC15689892D343D5A5AA6F6CBF4CFFDA92161FE260E2' \
         '5DE965E9D3DBC2622F00B7579675859795AFBB26123ADD58042198FC3DCCA97A61FAC1A4B8B23925A6802D4C160AA927519BB8CCBB6' \
         '290EE4C3CF12E67C0DAEA2DF0155EC6E3843D146041A0DC94CF72155A8C5AA4662CEADD6906A516BE9597D92CF03961C45A2929EB36' \
         '426C233009A7748AEF3F33621BCE071BEF8F751191A4D2C749081ACA2DC1C2B760BDBEC057D1FD76D4A533FDE09D7AED822C057CD09' \
         'E06B527EF6D2FD5D5114D6AAA70B008BAC393DC0EF19C51D21480AD65CE3A3A0156E82'

    data = {'appId': 'A0008', 'pid': '00300109', 'ed': ed, 'st': 'm', 'et': 'a'}
    ss = ""
    for key in sorted(data):
        ss = ss + data[key]
    salt = '*Lm%qiOHVEedH3%A^uFFsZvFH9T8QAZe'
    sign = getMd5Value(ss+salt)
    # data['sign'] = sign
    # 0789aecdd716eb348f729b11ea7bff29
    data['sign'] = '0789aecdd716eb348f729b11ea7bff29'


    base_url = 'http://ap.51y5.net/ap/fa.sec'
    #发送get请求
    r = requests.get(base_url, params=data)

    result = json.loads(r.json())
